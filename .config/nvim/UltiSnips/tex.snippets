# A lot of these snippets come from
# https://github.com/gillescastel/latex-snippets

# Define the maths() context
global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def maths():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal

# LaTeX headers
# b - only at beginning of line
snippet preamble "LaTeX headers and template" b
\documentclass{amsart}
\usepackage[margin=1in]{geometry}
\usepackage{amsmath, amssymb, amsthm}

\newtheorem{theorem}{Theorem}[section]
\newtheorem{corollary}{Corollary}[theorem]
\newtheorem{lemma}[theorem]{Lemma}

\theoremstyle{definition}
\newtheorem{definition}[theorem]{Definition}
\theoremstyle{remark}
\newtheorem*{remark}{Remark}

\newcommand{\st}{\,\, \mathrm{st} \,\,}
\newcommand{\dd}{\,\mathrm{d}}
\newcommand{\pderiv}[2]{\frac{\partial~#1}{\partial~#2}}
\newcommand{\eqtag}[1]{\stepcounter{equation}\tag{\theequation}\label{#1}}

\title{$1}
\begin{document}
\maketitle
$0
\end{document}
endsnippet

# Sections
snippet sec "Section" bA
\section{$1}
$0
endsnippet
snippet ssec "Subsection" bA
\subsection{$1}\hfill
$0
endsnippet
snippet sssec "Subsubsection" bA
\subsubsection{$1}\hfill
$0
endsnippet

# Create an environment
# A - expands automatically
snippet beg "begin{} / end{}" bA
\begin{$1}
  $2
\end{$1}$0
endsnippet

# A digit after an alphanumeral is autematically subscripted
# w - only expand if the trigger is surrounded by non-word characters
# r - the tab trigger contains a Python regular expression
context "maths()"
snippet '([A-Za-z])(\d)' "auto index subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet
# Adding a second digit puts them both in curly braces
snippet '([A-Za-z])_(\d\d)' "auto 2 index subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# Proper ellipsis
snippet ... "ldots" iA
\ldots
endsnippet

# Fractions
# i - allow expansion even at the end of a word
context "maths()"
snippet // "fraction" iA
\\frac{$1}{$2}$0
endsnippet

# Mimicking some cdlatex functionality
snippet "([a-zA-Z])'-" "bar" riA
\overline{`!p snip.rv = match.group(1)`}$0
endsnippet

# Parentheses
context "maths()"
snippet lr) "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet
context "maths()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet
context "maths()"
snippet lr} "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet
context "maths()"
snippet lr] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet
context "maths()"
snippet lr> "leftangle rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

# Large operators
context "maths()"
snippet sum "sum" w
\sum_{${1:n}=${2:0}}^{${3:\infty}} $0
endsnippet
context "maths()"
snippet ssum "sum over a set" w
\sum_{${1:n} \in ${2:\mathbb{N}}} $0
endsnippet
context "maths()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} $0
endsnippet
context "maths()"
snippet int "integral" w
\int_{${1:-\infty}}^{${2:\infty}} $3 \,\mathrm{d} $0
endsnippet
