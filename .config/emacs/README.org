#+TITLE: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: overview

The best place to read this file is at https://quarkQuark.github.io/literate-config/emacs. The org-mode source is stored at https://github.com/quarkQuark/dotfiles/tree/master/.config/emacs.

* Installation

Emacs expects to find user configuration in =.config/emacs/init.el=.  This *literate configuration file* must be *tangled* in order to generate that file and apply the configuration. Once Emacs is installed, this can be done from the command line with the following command:

#+begin_src shell

  emacs --batch -l org --eval '(org-babel-tangle-file "~/.config/emacs/README.org")'

#+end_src

Make sure to also download the fonts [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://edwardtufte.github.io/et-book/][ET Book]] (known to emacs as =ETBembo=):

#+begin_src shell

  sudo pacman -S ttf-fira-code
  yay -S ttf-et-book

#+end_src

When Emacs is launched for the first time, it will spend some time downloading and installing various packages.

* Package Management

Most of the rest of the configuration depends on Emacs' vast array of extensions. Therefore the first thing that must be configured is the package manager. Emacs' default package manager is simply called =package=. Even though it is built-in, we still have to do a little work to initialise it!

#+begin_src emacs-lisp

  ;; Where to look for packages to download.
  (setq package-archives
        '(("melpa"        . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("org"          . "https://orgmode.org/elpa/")
          ("elpa"         . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents package-refresh-contents)

#+end_src

Package management can be made much more convenient with [[https://github.com/jwiegley/use-package][use-package]]. We begin by installing it with =package=, but after this all packages will be installed through =use-package=.

#+begin_src emacs-lisp

  ;; Install use-package ...
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  ;; ... and enable it.
  (require 'use-package)

#+end_src

By default, =use-package= only loads packages which already exist on the system. The following setting tells it to handle downloading packages as well.

#+begin_src emacs-lisp

  (setq use-package-always-ensure t)

#+end_src

* User Interface

#+begin_src emacs-lisp

  (scroll-bar-mode -1)    ; Disable scrollbar.
  (tool-bar-mode -1)      ; Disable toolbar.
  (menu-bar-mode -1)      ; Disable menu bar.
  (tooltip-mode -1)       ; Disable tooltips.
  (set-fringe-mode 10)    ; Add breathing room.
  (column-number-mode)    ; Show column number in modeline.
  (size-indication-mode)  ; Show file size in modeline.

  ;; Scrolls way too fast by default.
  (setq mouse-wheel-scroll-amount '(1 ((control) . 'text-scale))
        scroll-margin 3
        scroll-step 1)

  (use-package all-the-icons)
  (use-package minions)
  (use-package doom-modeline
    :init
    (doom-modeline-mode)
    (minions-mode)
    :custom
    (doom-modeline-buffer-encoding nil)
    (doom-modeline-minor-modes t))

  ;; Pop-up to make keybindings discoverable.
  (use-package which-key
    :init (which-key-mode)
    :custom (which-key-idle-delay 0.3))

  ;; Preview colour codes
  (use-package rainbow-mode
    :hook
    (tex-mode . rainbow-mode)
    (html-mode . rainbow-mode)
    :config (rainbow-mode))

#+end_src

** Theme

Enabling [[https://github.com/hlissner/emacs-solaire-mode][Solaire mode]] slightly dims the backgrounds of non-editing buffers. This draws the eye to the editing space and gives the window a more refined look. Themes need to be configured to work with this. The package [[https://github.com/hlissner/emacs-doom-themes][doom-themes]] contains many nice preconfigured themes.

#+begin_src emacs-lisp

  (use-package solaire-mode
    :config (solaire-global-mode))

  (use-package doom-themes
    :config (doom-themes-org-config))

#+end_src

Liked dark themes:
- =doom-vibrant= /(default Doom Emacs theme, with slightly more contrast)./
- =doom-nord= /(Nord. Rather low contrast)./
- =doom-palenight= /(Used by System Crafters. Elegant and slightly purple)./

Liked light themes:
- =doom-one-light= /(Default Doom Emacs light theme)./

#+begin_src emacs-lisp

  (load-theme 'doom-one-light t)

  (set-face-attribute 'default        nil :font "Fira Code Retina" :height 101)
  (set-face-attribute 'fixed-pitch    nil :font "Fira Code Retina" :height 101)
  (set-face-attribute 'variable-pitch nil :font "ETBembo"          :height 120)

#+end_src

* Keybindings and Evil Mode

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer my-leader-def       :states 'normal :prefix "SPC")
    (general-create-definer my-local-leader-def :states 'normal :prefix "SPC m")
    (my-leader-def
      "b" 'counsel-switch-buffer
      "f" '(:ignore t :which-key "files")
      "ff" 'find-file))

  (defun quark/load-dotfile ()
    "Reload emacs configuration."
    (interactive)
    (load-file (expand-file-name "~/.config/emacs/init.el")))

  (my-leader-def
    "e" '(:ignore t :which-key "eval")
    "eb" 'eval-buffer
    "ed" 'quark/load-dotfile
    "ee" 'eval-last-sexp)

  (general-def
    "C-=" `text-scale-increase
    "C--" `text-scale-decrease)

  ;; Required for C-r (evil-mode undo).
  (use-package undo-tree
    :init (global-undo-tree-mode))

  (use-package evil
    :init
    (setq evil-move-cursor-back nil
          evil-want-keybinding nil ;; For evil-collection.
          evil-want-Y-yank-to-eol 1
          evil-undo-system 'undo-tree)
    :config
    (evil-mode)
    (general-def "<escape>" 'keyboard-escape-quit) ; Make ESC quit prompts.
    (general-def evil-insert-state-map "C-g" 'evil-normal-state)
    (general-def 'normal "j" 'evil-next-visual-line)
    (general-def 'normal "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  ;; Escape insert mode with "jk".
  (general-imap "j" (general-key-dispatch 'self-insert-command
                      :timeout 0.25
                      "k" 'evil-normal-state))

#+end_src

* Ivy (completion)

#+begin_src emacs-lisp

  (use-package ivy
    :bind
    (("C-s" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode))

  (use-package ivy-rich
    :init (ivy-rich-mode))

  (use-package counsel
    :config (counsel-mode))

#+end_src

** Interactively open dotfiles

This command (bound to =SPC f d=) allows me to search for and open dotfiles.

#+begin_src emacs-lisp

  (defun quark/ivy-find-file-action (key)
    "Find dotfile from KEY in quark/dotfile-list."
    (with-ivy-window (find-file (cdr (assoc key quark/dotfile-list)))))

  ;; A list of dotfiles, each associated with a keyword.
  (setq quark/dotfile-list
        '(("Dotfiles README" . "~/README.md")
          ("Emacs"           . "~/.config/emacs/README.org")
          ("XMonad"          . "~/.config/xmonad/README.md")))

  (defun quark/ivy-open-dotfile ()
    "Open configuration file for PROGRAM."
    (interactive)
    (ivy-read "Open dotfile: " (mapcar 'car quark/dotfile-list)
              :action 'quark/ivy-find-file-action))

  (my-leader-def "fd" 'quark/ivy-open-dotfile)

#+end_src

* Programming

#+begin_src emacs-lisp

  (defun quark/display-line-numbers ()
    (setq-local display-line-numbers 'visual
                display-line-numbers-current-absolute t))

  (add-hook 'prog-mode-hook 'quark/display-line-numbers)

  ;; More easily see how parentheses pair up.
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Automatically close parentheses.
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :config (require 'smartparens-config))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :custom (lsp-keymap-prefix "C-c l")
    :config (lsp-enable-which-key-integration t))

  (use-package lsp-ui)

  (use-package company
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map ("<tab>" . company-complete-selection))
    (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  ;; Make the ui slightly nicer (I'm not entirely sure if it's worth it).
  (use-package company-box
    :hook (company-mode-hook . company-box-mode))

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

=Origami= enables code-folding.

#+begin_src emacs-lisp

  (use-package origami
    :hook
    (prog-mode . origami-mode)
    ;(css-mode  . origami-close-all-nodes)
    :general
    (:keymaps 'evil-normal-state-map
              "TAB" 'origami-recursively-toggle-node)
    :config
    (add-to-list 'origami-parser-alist '(css-mode . origami-c-style-parser)))

#+end_src

** Emacs Lisp

#+begin_src emacs-lisp

  ;; Be strict about parentheses.
  (add-hook 'emacs-lisp-mode-hook 'smartparens-strict-mode)
  (use-package evil-cleverparens
    :hook (emacs-lisp-mode . evil-cleverparens-mode))

#+end_src

** Haskell

Lsp-mode requires =haskell-language-server=. If running Arch Linux, make sure to install =haskell-language-server-bin= from the Arch User Repository instead of =haskell-language-server= from the official repositories. The Arch official repositories use dynamic linking for Haskell packages, which leads to many messy dependency problems when installing or upgrading any Haskell package.

#+begin_src emacs-lisp

  (use-package lsp-haskell
    :hook (haskell-mode . lsp-deferred))

#+end_src

* Magit

#+begin_src emacs-lisp

  (use-package magit)
  (use-package git-gutter
    :init (global-git-gutter-mode))

#+end_src

I backup all my [[https://github.com/quarkQuark/dotfiles][dotfiles]] using a git bare repository. It is difficult for Emacs to tell automatically whether I want to use magit on my dotfiles repository or some other repository, as they can overlap. Following [[https://emacs.stackexchange.com/questions/30602/use-nonstandard-git-directory-with-magit][this Stackexchange answer]], I set up alternative commands to launch Magit explicitly with the correct settings.

#+begin_src emacs-lisp

  ;; Add args when used for dotfiles or remove args otherwise.
  (setq dotfiles-git-dir (concat "--git-dir=" (expand-file-name "~/.dotfiles-git")))
  (setq dotfiles-work-tree (concat "--work-tree=" (expand-file-name "~")))

  (defun quark/dotfiles-magit-status ()
    "Open magit to manage my dotfiles git bare repository."
    (interactive)
    (add-to-list 'magit-git-global-arguments dotfiles-git-dir)
    (add-to-list 'magit-git-global-arguments dotfiles-work-tree)
    (call-interactively 'magit-status))

  (defun quark/magit-status ()
    "Replacement for `magit-status' for compatibility with quark/dotfiles-magit-status."
    (interactive)
    (setq magit-git-global-arguments (remove dotfiles-git-dir magit-git-global-arguments))
    (setq magit-git-global-arguments (remove dotfiles-work-tree magit-git-global-arguments))
    (call-interactively 'magit-status))

  (general-def "C-x g" 'quark/magit-status)
  (general-def magit-file-mode-map "C-x g" 'quark/magit-status)

  (my-leader-def
    "g" '(:ignore t :which-key "git")
    "gd" '(quark/dotfiles-magit-status :which-key "dotfiles-magit-status")
    "gg" '(quark/magit-status          :which-key "magit-status"))

#+end_src

* Org Mode

https://zzamboni.org/post/beautifying-org-mode-in-emacs/

#+begin_src emacs-lisp

  (defun quark/org-mode-setup ()
    "Function to run on `org-mode' startup."
    (variable-pitch-mode)
    (quark/org-font-setup)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . quark/org-mode-setup)
    :custom
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)
    (org-startup-indented t)
    (org-startup-with-latex-preview t)
    (org-format-latex-options '(plist-put org-format-latex-options :scale 1.2)))

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "○" "●" "►" "◇")))

  ;; Unhide emphasis markers under cursor.
  (use-package org-appear
    :hook (org-mode . org-appear-mode))

  ;; Automatically toggle latex preview under cursor
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))

  (use-package cdlatex
    :hook (org-mode . org-cdlatex-mode))

  (defun quark/org-font-setup ()
    "Set up my font preferences for `org-mode'."

    ;; Prettify list bullets.
    ;; Seems to work only sometimes?
    (font-lock-add-keywords
     'org-mode
     '(("^ *\\([-]\\) "
        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set heading font sizes.
    (set-face-attribute 'org-document-title nil :font "ETBembo" :weight 'bold :height 2.0)
    (dolist (face '((org-level-1 . 1.75)
                    (org-level-2 . 1.5)
                    (org-level-3 . 1.25)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "ETBembo" :weight 'medium :height (cdr face)))

    ;; Display certain regions in a fixed-pitch font.
    (set-face-attribute 'org-block nil           :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-checkbox nil        :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil            :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil          :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-formula nil         :inherit 'fixed-pitch)
    (set-face-attribute 'org-meta-line nil       :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-table nil           :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil        :inherit '(shadow fixed-pitch)))

  (defun quark/org-mode-visual-fill ()
    "Configure `visual-fill-column-mode' for `org-mode'."
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode))

  (use-package visual-fill-column
    :hook (org-mode . quark/org-mode-visual-fill))

  (with-eval-after-load 'ox-latex
    (setq org-latex-compiler "lualatex")
    (setq org-latex-pdf-process '("latexmk -%latex -pvc -view=none %f"))
    (add-to-list 'org-latex-classes
                 '("my-notes"
                   "\\documentclass{my-notes}"
                   ;; Commands for each heading type (further subheadings become lists).
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    (add-to-list 'org-latex-classes
                 '("uonmathreport-colour"
                   "\\documentclass{uonmathreport-colour}"
                   ;; Commands for each heading type (further subheadings become lists).
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    (setq org-latex-default-class "my-notes"))

#+end_src

** Babel

#+begin_src emacs-lisp

  ;; List of languages org-babel can evaluate.
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)

  ;; Enable structure templates.
  (require 'org-tempo)

  (dolist (template
           '(("el"   . "src emacs-lisp")
             ("sh"   . "src shell")
             ("py"   . "src python")
             ("hs"   . "src haskell")
             ("css"  . "src css")
             ("html" . "export html")
             ("def"  . "definition")
             ("rem"  . "remark")
             ("lem"  . "lemma")
             ("thm"  . "theorem")
             ("cor"  . "corollary")
             ("prf"  . "proof")))
    (add-to-list 'org-structure-template-alist template))

  ;; Recognise extra languages
  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  (push '("latex" . latex) org-src-lang-modes)

#+end_src

* LaTeΧ

#+begin_src emacs-lisp

  (use-package tex
    :ensure auctex)

  ;; Mostly just to enable system fonts.
  (setq TeX-engine "lualatex")

#+end_src

* File management

** Dired

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil ;; Preinstalled - don't try to find on MELPA.
    :commands (dired dired-jump)
    :bind ("C-x C-j" . dired-jump)
    :custom (dired-listing-switches "-Agho --group-directories-first"))

  ;; Stop dired from making a new buffer for each directory.
  (use-package dired-single
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  ;; Font lock rules for dired.
  (use-package diredfl
    :hook (dired-mode . diredfl-mode))

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

  ;; Collapse trivial file hierarchies.
  (use-package dired-collapse
    :hook (dired-mode . dired-collapse-mode))
#+end_src

* Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :pin melpa-stable
    :init (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :after projectile
    :init (counsel-projectile-mode))

  (my-leader-def
    "SPC" 'projectile-find-file
    "p" '(:ignore t :which-key "projects")
    "pp" 'projectile-switch-project)

#+end_src

* Miscellaneous

#+begin_src emacs-lisp

  ;; More helpful help pages.
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-comand] . helpful-command)
    ([remap describe-key] . helpful-key))

  ;; Manage .pacnew and .pacsave files on Arch Linux.
  (use-package pacfiles-mode)

#+end_src
